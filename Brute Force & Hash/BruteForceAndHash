//входные данные берутся из файла wap.txt, в котором находится текст "Войны и мира" на английском языке
let fs = require('fs');
let s = fs.readFileSync('wap.txt');
s = s.toString();
let t = 'war';
let hashS = 0;
let hashT = 0
BruteForce();
SimpleHashSet(hashS, hashT);
QuadroHashSet(hashS, hashT);
RabinCarpHashSet(hashS, hashT);

function BruteForce(){
	let bf = new Array();
	for (let i = 0; i < s.length - t.length + 1; i++){
        for (let j = 0; s[i + j] == t[j]; j++){
            if (j == t.length - 1)
                bf.push(i + 1);
		}
	}
	console.log("BruteForce");
	console.log(bf);
	console.log(" ");
}

function SimpleHashSet(hashS, hashT){
	let sh = new Array();
	for (let i = 0; i < t.length; i++){
        hashS += s.charCodeAt(i);
        hashT += t.charCodeAt(i);
    }
    for (let j = 0; j < s.length - t.length; j++){
        if (hashS == hashT){
            for (let l = 0; s[j + l] == t[l]; l++){
                if (l == t.length - 1)
                    sh.push(j + 1);
		    }
		}
        hashS = hashS + s.charCodeAt(j + t.length) - s.charCodeAt(j);
    }
    console.log("SimpleHash");
	console.log(sh);
	console.log(" ");
}

function QuadroHashSet(hashS, hashT){
	let qh = new Array();
	for (let i = 0; i < t.length; i++){
        hashS += Math.pow(s.charCodeAt(i), 2);
        hashT += Math.pow(t.charCodeAt(i), 2);
    }
    for (let j = 0; j < s.length - t.length; j++){
        if (hashS == hashT){
            for (let l = 0; s[j + l] == t[l]; l++){
                if (l == t.length - 1)
                    qh.push(j + 1);
            }
        }
        hashS = hashS + Math.pow(s.charCodeAt(j + t.length), 2) - Math.pow(s.charCodeAt(j), 2);
    }
    console.log("QuadroHash");
	console.log(qh);
	console.log(" ");
}

function RabinCarpHashSet(hashS, hashT){
	let rch = new Array();
	for (let i = 0; i < t.length; i++){
        hashS += s.charCodeAt(i) * Math.pow(2, t.length - i - 1);
        hashT += t.charCodeAt(i) * Math.pow(2, t.length - i- 1);
    }
    for (let j = 0; j < s.length - t.length; j++){
        if (hashS == hashT){
            for (let l = 0; s[j + l] == t[l]; l++){
                if (l == t.length - 1)
                    rch.push(j + 1);
            }
        }
        hashS = (hashS - s.charCodeAt(j) * Math.pow(2, t.length - 1)) * 2 + s.charCodeAt(j + t.length);
    }
    console.log("RabinCarpHash");
	console.log(rch);
}
